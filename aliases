# prezto plugin
alias x=unarchive

alias rot13="tr '[A-Za-z]' '[N-ZA-Mn-za-m]'"
alias du="du -h"

# git OP
alias g=git
alias ga='git add'
alias gap='git add -p'
# stage deleted files
alias gad='git add "$(git ls-files --deleted)"'
alias gb='git branch'
alias gba='git branch -a'
alias gbc='git checkout -b'
alias gc='git commit -v'
alias gcm='git commit -v -m'
alias gca='git commit -v -a'
alias gcl='git config --list'
alias gclean='git clean -dfi --'
alias gcleand='git clean -dfin --' # dry run
alias gcleanf='git reset --hard && git clean -dfx' # fore clean everything
alias gcom='git checkout main'
alias gcod='git checkout dev'
alias gco='git checkout'
alias gcop='git checkout -p'
alias gcount='git shortlog -sn'
alias gcp='git cherry-pick'
alias gd='git diff'
alias gdc='git diff --cached'
alias gl='git pull'
alias glu='git submodule foreach git pull origin master'
alias gm='git merge'
alias gmt='git mergetool --no-prompt'

alias gp='git push'
alias gpf='git push --force'
alias gpoat='git push origin --all && git push origin --tags'

alias gr='git remote'
alias gra='git remote add'
alias grao='git remote add origin'
alias grmv='git remote rename'
alias grrm='git remote remove'
alias grset='git remote set-url'
alias grup='git remote update'
alias grv='git remote -v'

alias grba='git rebase --abort'
alias grbc='git rebase --continue'
alias grbi='git rebase -i'

alias grh='git reset HEAD'
alias grhh='git reset HEAD --hard'
alias grt='cd "$(git rev-parse --show-toplevel || echo ".")"'
alias gst='git status -s'
alias gsta='git stash'
alias gstaa='git stash apply'
alias gstd='git stash drop'
alias gstl='git stash list'
alias gstp='git stash pop'
alias gsts='git stash show --text'
alias gup='git pull --rebase'
alias gwc='git whatchanged -p --abbrev-commit --pretty=medium'

# search for commits where a specific file was added (argument)
alias gfa='git log --diff-filter=A --'
alias gfd='git log --diff-filter=D --'
alias gfm='git log --diff-filter=M --'

# Remove bad git aliases
unalias gs 2>/dev/null

# some more ls aliases
alias ll='ls -alhF'
alias la='ls -A'
alias l='ls -CFlh'

# cd aliases
#alias -='cd -'
alias ..='cd ..'
alias ...='cd ../..'

# npm run alias
alias r='nr'
alias c='code-insiders'
alias vim="nvim"
# TODO: where to remove the aliases of d, b and p?
# d was already taken
alias nd='nr dev'
# b was already taken
alias nb='nr build'
alias t='nr test'
# p was already taken
alias np='nr play'

# for talks with demos
alias nio='pnpm i --prefer-offline'

# Update function
function update_dotfiles() {
  printf '\033[0;34m%s\033[0m\n' "Updating dotfiles"
  cd ~/dotfiles
  if git pull --rebase origin "$(git rev-parse --abbrev-ref HEAD)"
  then
    echo -e "\e[32m    .___      __    _____.__.__                 "
    echo "  __| _/_____/  |__/ ____\__|  |   ____   ______"
    echo " / __ |/  _ \   __\   __\|  |  | _/ __ \ /  ___/"
    echo "/ /_/ (  <_> )  |  |  |  |  |  |_\  ___/ \___ \ "
    echo "\____ |\____/|__|  |__|  |__|____/\___  >____  >"
    echo "     \/                               \/     \/ "
    echo -e "\e[34mdofiles updated and/or is at the current version.\e[0m"
  else
    echo -e "\e[31mThere was an error updating...\e[0m"
  fi
  cd -
}

# if which source-highlight > /dev/null 2>&1; then
#   alias ccat="source-highlight --out-format=esc -o STDOUT -i"
# fi

export EDITOR=nvim
export VISUAL=nvim
# This would break Git
# export PAGER=bat

# if you want java
#if [[ -x /usr/libexec/java_home ]]; then
#  export JAVA_HOME=$(/usr/libexec/java_home)
#fi

# if which pyenv-virtualenv-init > /dev/null 2>&1; then
#   eval "$(pyenv init -)"
#   eval "$(pyenv virtualenv-init -)";
# fi

# export TERM=xterm-256color
# export LC_ALL=en_US.UTF-8

# To avoid system messages to be in French
export LANG="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"

# moving between words
#bindkey "OD" forward-word
#bindkey "OC:" backward-word

function update_sponsors() {
  local file

  if [ ! -f "package.json" ]; then
    echo "No package.json found"
    return
  fi

  if [ -n "$1" -a -f "$1" ]; then
    file=$1
  else
    file="$(find . -name sponsors.json)"
  fi

  if [ -z "$file" ]; then
    echo "No sponsors.json file found"
    return
  fi

  echo "Updating ${file}..."

  wget -O "$file" https://sponsors.esm.is/sponsors-docs.json
  pnpm exec prettier --write "$file"

  update_readme_sponsors
}

function update_readme_sponsors() {
  local content escaped_content temp_start temp_end temp_replacement start_marker end_marker start_line end_line

  # Fetch content from the URL
  content=$(wget -qO- https://sponsors.esm.is/sponsors-docs-html)

  # Escape special characters for use in sed
  escaped_content=$(printf '%s\n' "$content" | sed -e 's/[\/&]/\\&/g')

  # Create temporary files for manipulation
  temp_start=$(mktemp)
  temp_end=$(mktemp)
  temp_replacement=$(mktemp)

  # Markers for replacement
  start_marker="<!--sponsors start-->"
  end_marker="<!--sponsors end-->"

  # Find line numbers for start and end markers in README.md
  start_line=$(grep -n "$start_marker" README.md | cut -d ":" -f 1)
  end_line=$(grep -n "$end_marker" README.md | cut -d ":" -f 1)

	# allow overwriting of files with >
  set +o noclobber

  # Split README.md into three parts
  head -n "$((start_line - 1))" README.md > "$temp_start"
  tail -n "+$((end_line + 1))" README.md > "$temp_end"

  # Insert fetched content between markers
  printf "%s\n\n%s\n" "$(cat "$temp_start")" "$content" > "$temp_replacement"

  # Combine the parts to reconstruct README.md
  rm README.md
  cat "$temp_replacement" "$temp_end" > README.md

  # Remove temporary files
  rm "$temp_start" "$temp_end" "$temp_replacement"

	# restore
  set -o noclobber

  pnpm exec prettier --write README.md
}
