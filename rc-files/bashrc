PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color) color_prompt=yes ;;
esac

# override this old default
color_prompt=yes

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

color_prompt=yes
if [ "$color_prompt" = yes ]; then
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm* | rxvt*)
  PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
  ;;
*) ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  #alias dir='dir --color=auto'
  #alias vdir='vdir --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
  . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
  . /etc/bash_completion
fi

##################################################################
##################################################################
##################################################################

# aliases
source ~/dotfiles/aliases

PATH="/usr/local/php5/bin:$PATH:$HOME/scripts/:$HOME/local-extra/bin"

function name() {
  grep -i "$1" /etc/passwd | cut -d: -f5 | sort
}

function rights() {
  r=$(echo "$1" | sed 's/[^rwx]//g')
  if [ ! "$r" ]; then
    echo "Usage rights r|w|x <user>"
    exit 1
  fi

  shif "$r"
  shift
  setfacl -Rm u:$2:$r $@
}

tgz() {
  if [ ! -d "$1" ]; then
    echo "Usage: $0 <folder>"
    exit 1
  fi

  tar -cvf - "$1" | gzip >$(basename "$1")".tar.gz"
}

untgz() {
  if [ ! -f "$1" ]; then
    echo "Usage: $0 <file>"
    exit 1
  fi

  gunzip <"$1" | tar -xvf -
}

TERM=xterm-256color
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/$USER/partage/ext/lib

# Git completions
# source ~/dotfiles/git-completion.bash
# UTF-8 for logs
export LANG="en_US.UTF-8"

#[ -f $HOME/partage/bin/zsh ] && exec $HOME/partage/bin/zsh -l
# Reset
Color_Off="\[\033[0m\]" # Text Reset

# Regular Colors
Black="\[\033[0;30m\]"  # Black
Red="\[\033[0;31m\]"    # Red
Green="\[\033[0;32m\]"  # Green
Yellow="\[\033[0;33m\]" # Yellow
Blue="\[\033[0;34m\]"   # Blue
Purple="\[\033[0;35m\]" # Purple
Cyan="\[\033[0;36m\]"   # Cyan
White="\[\033[0;37m\]"  # White

# Bold
BBlack="\[\033[1;30m\]"  # Black
BRed="\[\033[1;31m\]"    # Red
BGreen="\[\033[1;32m\]"  # Green
BYellow="\[\033[1;33m\]" # Yellow
BBlue="\[\033[1;34m\]"   # Blue
BPurple="\[\033[1;35m\]" # Purple
BCyan="\[\033[1;36m\]"   # Cyan
BWhite="\[\033[1;37m\]"  # White

# Underline
UBlack="\[\033[4;30m\]"  # Black
URed="\[\033[4;31m\]"    # Red
UGreen="\[\033[4;32m\]"  # Green
UYellow="\[\033[4;33m\]" # Yellow
UBlue="\[\033[4;34m\]"   # Blue
UPurple="\[\033[4;35m\]" # Purple
UCyan="\[\033[4;36m\]"   # Cyan
UWhite="\[\033[4;37m\]"  # White

# Background
On_Black="\[\033[40m\]"  # Black
On_Red="\[\033[41m\]"    # Red
On_Green="\[\033[42m\]"  # Green
On_Yellow="\[\033[43m\]" # Yellow
On_Blue="\[\033[44m\]"   # Blue
On_Purple="\[\033[45m\]" # Purple
On_Cyan="\[\033[46m\]"   # Cyan
On_White="\[\033[47m\]"  # White

# High Intensty
IBlack="\[\033[0;90m\]"  # Black
IRed="\[\033[0;91m\]"    # Red
IGreen="\[\033[0;92m\]"  # Green
IYellow="\[\033[0;93m\]" # Yellow
IBlue="\[\033[0;94m\]"   # Blue
IPurple="\[\033[0;95m\]" # Purple
ICyan="\[\033[0;96m\]"   # Cyan
IWhite="\[\033[0;97m\]"  # White

# Bold High Intensty
BIBlack="\[\033[1;90m\]"  # Black
BIRed="\[\033[1;91m\]"    # Red
BIGreen="\[\033[1;92m\]"  # Green
BIYellow="\[\033[1;93m\]" # Yellow
BIBlue="\[\033[1;94m\]"   # Blue
BIPurple="\[\033[1;95m\]" # Purple
BICyan="\[\033[1;96m\]"   # Cyan
BIWhite="\[\033[1;97m\]"  # White

# High Intensty backgrounds
On_IBlack="\[\033[0;100m\]"  # Black
On_IRed="\[\033[0;101m\]"    # Red
On_IGreen="\[\033[0;102m\]"  # Green
On_IYellow="\[\033[0;103m\]" # Yellow
On_IBlue="\[\033[0;104m\]"   # Blue
On_IPurple="\[\033[10;95m\]" # Purple
On_ICyan="\[\033[0;106m\]"   # Cyan
On_IWhite="\[\033[0;107m\]"  # White

# Various variables you might want for your PS1 prompt instead
Time12h="\T"
Time12a="\@"
PathShort="\W"
PathFull="\w"
NewLine="\n"
Jobs="\j"

# This PS1 snippet was adopted from code for MAC/BSD I saw from: http://allancraig.net/index.php?option=com_content&view=article&id=108:ps1-export-command-for-git&catid=45:general&Itemid=96
# I tweaked it to work on UBUNTU 11.04 & 11.10 plus made it mo' better

export PS1=$IBlack$Time12h$Color_Off'$(git branch &>/dev/null;\
  if [ $? -eq 0 ]; then \
    echo "$(echo `git status` | grep "nothing to commit" > /dev/null 2>&1; \
    if [ "$?" -eq "0" ]; then \
      # @4 - Clean repository - nothing to commit
echo "'$Yellow' "$(git branch | grep ^*|sed s/\*\ //):"'$Green'"✓; \
else \
  # @5 - Changes to working tree
echo "'$Yellow' "$(git branch | grep ^*|sed s/\*\ //):"'$IRed'"✗; \
fi) '$BPurple$PathShort$Color_Off'\$ "; \
          else \
            # @2 - Prompt when not in GIT repo
echo " '$Purple$PathShort$Color_Off'\$ "; \
fi)'

# Extra usr/local
EXTRA_LOCAL="~/local-extra"
export CPLUS_INCLUDE_PATH="${CPLUS_INCLUDE_PATH}:${EXTRA_LOCAL}/include"
export LIBRARY_PATH="${LIBRARY_PATH}:${EXTRA_LOCAL}/lib"
export LD_LIBRARY_PATH="${EXTRA_LOCAL}/lib:${LD_LIBRARY_PATH}"
export PKG_CONFIG_PATH="$=${EXTRA_LOCAL}/lib/pkconfig"

# Oracle
export ORACLE_HOME=/opt/oracle
export LD_LIBRARY_PATH=$ORACLE_HOME:$ORACLE_HOME/lib:$LD_LIBRARY_PATH
export PATH=$ORACLE_HOME:$PATH
export TNS_ADMIN=$ORACLE_HOME

export iOSOpenDevPath=/opt/iOSOpenDev
export iOSOpenDevDevice=
export PATH=/opt/iOSOpenDev/bin:$PATH

# Set up fzf key bindings and fuzzy completion
eval "$(fzf --bash)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

# Deno support
if [ -f "$HOME/.deno/env" ]; then
  . "$HOME/.deno/env"
fi
export VOLTA_HOME="$HOME/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"

# Added by LM Studio CLI (lms)
export PATH="$PATH:/Users/posva/.lmstudio/bin"
